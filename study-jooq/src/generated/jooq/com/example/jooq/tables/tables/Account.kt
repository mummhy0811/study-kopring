/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.tables


import com.example.jooq.tables.Public
import com.example.jooq.tables.keys.ACCOUNT_PKEY
import com.example.jooq.tables.keys.UKGEX1LMAQPG0IR5G1F5EFTYAA1
import com.example.jooq.tables.keys.UKQ0UJA26QGU1ATULENWUP9RXYR
import com.example.jooq.tables.tables.records.AccountRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Account(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AccountRecord>?,
    aliased: Table<AccountRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AccountRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.account</code>
         */
        val ACCOUNT: Account = Account()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<AccountRecord> = AccountRecord::class.java

    /**
     * The column <code>public.account.id</code>.
     */
    val ID: TableField<AccountRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.account.email</code>.
     */
    val EMAIL: TableField<AccountRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.account.password</code>.
     */
    val PASSWORD: TableField<AccountRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.account.roles</code>.
     */
    val ROLES: TableField<AccountRecord, String?> = createField(DSL.name("roles"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.account.username</code>.
     */
    val USERNAME: TableField<AccountRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AccountRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AccountRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.account</code> table reference
     */
    constructor(): this(DSL.name("account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AccountRecord>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getIdentity(): Identity<AccountRecord, Long?> = super.getIdentity() as Identity<AccountRecord, Long?>
    public override fun getPrimaryKey(): UniqueKey<AccountRecord> = ACCOUNT_PKEY
    public override fun getUniqueKeys(): List<UniqueKey<AccountRecord>> = listOf(UKQ0UJA26QGU1ATULENWUP9RXYR, UKGEX1LMAQPG0IR5G1F5EFTYAA1)
    public override fun `as`(alias: String): Account = Account(DSL.name(alias), this)
    public override fun `as`(alias: Name): Account = Account(alias, this)
    public override fun `as`(alias: Table<*>): Account = Account(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): Account = Account(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): Account = Account(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): Account = Account(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row5<Long?, String?, String?, String?, String?> = super.fieldsRow() as Row5<Long?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
