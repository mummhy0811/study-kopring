/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.tables.records


import com.example.jooq.tables.tables.Account

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord() : UpdatableRecordImpl<AccountRecord>(Account.ACCOUNT), Record5<Long?, String?, String?, String?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var email: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var password: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var roles: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var username: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row5<Long?, String?, String?, String?, String?> = super.fieldsRow() as Row5<Long?, String?, String?, String?, String?>
    public override fun valuesRow(): Row5<Long?, String?, String?, String?, String?> = super.valuesRow() as Row5<Long?, String?, String?, String?, String?>
    public override fun field1(): Field<Long?> = Account.ACCOUNT.ID
    public override fun field2(): Field<String?> = Account.ACCOUNT.EMAIL
    public override fun field3(): Field<String?> = Account.ACCOUNT.PASSWORD
    public override fun field4(): Field<String?> = Account.ACCOUNT.ROLES
    public override fun field5(): Field<String?> = Account.ACCOUNT.USERNAME
    public override fun component1(): Long? = id
    public override fun component2(): String? = email
    public override fun component3(): String? = password
    public override fun component4(): String? = roles
    public override fun component5(): String? = username
    public override fun value1(): Long? = id
    public override fun value2(): String? = email
    public override fun value3(): String? = password
    public override fun value4(): String? = roles
    public override fun value5(): String? = username

    public override fun value1(value: Long?): AccountRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: String?): AccountRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: String?): AccountRecord {
        set(2, value)
        return this
    }

    public override fun value4(value: String?): AccountRecord {
        set(3, value)
        return this
    }

    public override fun value5(value: String?): AccountRecord {
        set(4, value)
        return this
    }

    public override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: String?): AccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(id: Long? = null, email: String? = null, password: String? = null, roles: String? = null, username: String? = null): this() {
        this.id = id
        this.email = email
        this.password = password
        this.roles = roles
        this.username = username
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(value: com.example.jooq.tables.tables.pojos.Account?): this() {
        if (value != null) {
            this.id = value.id
            this.email = value.email
            this.password = value.password
            this.roles = value.roles
            this.username = value.username
            resetChangedOnNotNull()
        }
    }
}
